import torch
from torchvision import transforms
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import math
from torch.nn.modules.utils import _pair
from Hartley  Spectral Pooling import *



# 加载图片
image_path = C:\Users\27612\Desktop\Glas_dataset\resized_128x128\train\img\12.png"
image = Image.open(image_path)

# 图片预处理
transform = transforms.Compose([
    transforms.Resize((224, 224)),  # 调整图片大小
    transforms.ToTensor()            # 将图片转换为Tensor
])
input_image = transform(image)
input_image = input_image.unsqueeze(0)  # 在第0维增加一个维度，表示batch_size为1

# 定义不同的池化层
maxpool_layers = [torch.nn.MaxPool2d(kernel_size=2),
                  torch.nn.MaxPool2d(kernel_size=4),
                  torch.nn.MaxPool2d(kernel_size=8),
                  torch.nn.MaxPool2d(kernel_size=16)]

spectral_pool_layers = [SpectralPool2d(scale_factor=(2, 2)),
                        SpectralPool2d(scale_factor=(4, 4)),
                        SpectralPool2d(scale_factor=(8, 8)),
                        SpectralPool2d(scale_factor=(16, 16))]

# 对图片进行不同的池化操作
maxpool_outputs = [layer(input_image) for layer in maxpool_layers]
spectral_pool_outputs = [layer(input_image) for layer in spectral_pool_layers]

# 显示结果
fig, axes = plt.subplots(nrows=5, ncols=1, figsize=(15, 20))

# 显示原始图片
input_np = input_image.squeeze().permute(1, 2, 0).numpy()
axes[0].imshow(input_np)
axes[0].set_title("Original Image")
axes[0].axis('off')

# 显示不同缩放因子下的结果图
for i in range(len(maxpool_outputs)):
    maxpool_np = maxpool_outputs[i].squeeze().permute(1, 2, 0).detach().numpy()
    spectral_pool_np = spectral_pool_outputs[i].squeeze().permute(1, 2, 0).detach().numpy()

    axes[i+1].imshow(np.hstack((maxpool_np, spectral_pool_np)))
    axes[i+1].set_title(f"MaxPool2d vs Spectral Pooling (scale_factor={maxpool_layers[i].kernel_size})")
    axes[i+1].axis('off')

plt.tight_layout()
plt.show()
